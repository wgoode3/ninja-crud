{"version":3,"sources":["Components/NinjaForm.js","Components/NinjaTable.js","Components/NinjaEdit.js","Components/NinjaInfoCard.js","App.js","serviceWorker.js","index.js"],"names":["NinjaForm","props","useState","name","setName","level","setLevel","onSubmit","e","preventDefault","ninjaAdd","type","onChange","target","value","NinjaTable","border","ninjas","map","ninja","i","key","onClick","ninjaDelete","remove","editNinja","edit","NinjaEdit","useEffect","ninjaToEdit","ninjaUpdate","NinjaInfoCard","ninjaIdToEdit","setNinjaIdToEdit","setNinjaToEdit","setNinjas","slice","deleteNinja","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3df3761c.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst NinjaForm = props => {\n  const [name, setName] = useState(\"\");\n  const [level, setLevel] = useState(1);\n\n  const addNinjaToList = e => {\n    e.preventDefault();\n    props.ninjaAdd({name: name, level: level});\n    setName(\"\");\n    setLevel(1);\n  }\n\n  return (\n    <form onSubmit={ addNinjaToList } >\n      <h3>Create</h3>\n      <label>Name</label>\n      <input \n        type=\"text\" \n        onChange={ e => setName(e.target.value)}\n        value={name} \n      />\n      <label>Level</label>\n      <input \n        type=\"number\" \n        onChange={ e => setLevel(e.target.value)} \n        value={level}\n      />\n      <input type=\"submit\" />\n    </form>\n  );\n}\n\nexport default NinjaForm;","import React, { useState } from 'react';\n\n\nconst NinjaTable = props => {\n\n  const remove = i => {\n    props.ninjaDelete(i);\n  }\n\n  const edit = i => {\n    props.editNinja(i);\n  }\n\n  return (\n    <table border=\"1\">\n    <tbody>\n      <tr>\n        <th>Name</th>\n        <th>Level</th>\n        <th>Actions</th>\n      </tr>\n      {\n        props.ninjas.map( (ninja, i) => \n          <tr key={i}>\n            <td>{ninja.name}</td>\n            <td>{ninja.level}</td>\n            <td>\n              <button onClick={ e => remove(i) }>Delete</button>\n              &nbsp;\n              <button onClick={ e => edit(i) }>Edit</button>\n            </td>\n          </tr>\n        )\n      }\n    </tbody>\n  </table>\n  );\n}\n\nexport default NinjaTable;","import React, { useState, useEffect } from 'react';\n\nconst NinjaEdit = props => {\n\n  const [name, setName] = useState(\"\");\n  const [level, setLevel] = useState(1);\n\n  useEffect( () => {\n    setName(props.ninjaToEdit.name);\n    setLevel(props.ninjaToEdit.level);\n  }, []);\n\n  const update = e => {\n    e.preventDefault();\n    props.ninjaUpdate({name: name, level: level});\n  }\n\n  return (\n    <form onSubmit={ update } >\n      <h3>Edit</h3>\n      <label>Name</label>\n      <input \n        type=\"text\" \n        onChange={ e => setName(e.target.value)}\n        value={name} \n      />\n      <label>Level</label>\n      <input \n        type=\"number\" \n        onChange={ e => setLevel(e.target.value)} \n        value={level}\n      />\n      <input type=\"submit\" />\n    </form>\n  );\n}\n\nexport default NinjaEdit;","import React, { useState } from 'react';\nimport NinjaForm from './NinjaForm';\nimport NinjaTable from './NinjaTable';\nimport NinjaEdit from './NinjaEdit';\n\n\nconst NinjaInfoCard = props => {\n\n  const [ninjaIdToEdit, setNinjaIdToEdit] = useState(-1);\n  const [ninjaToEdit, setNinjaToEdit] = useState({});\n  const [ninjas, setNinjas] = useState([]);\n\n  const deleteNinja = i => {\n    setNinjas([...ninjas.slice(0, i), ...ninjas.slice(i+1)]);\n  }\n\n  const addNinja = ninja => {\n    setNinjas([...ninjas, ninja]);\n  }\n\n  const updateNinja = ninja => {\n    setNinjas([...ninjas.slice(0, ninjaIdToEdit), ninja, ...ninjas.slice(ninjaIdToEdit+1)]);\n    setNinjaIdToEdit(-1);\n    setNinjaToEdit({});\n  }\n\n  return (\n    <>\n      <h1>Ninja Info Cards</h1>\n      <hr />\n      {\n        ninjaIdToEdit !== -1 \n        ? \n        <NinjaEdit ninjaToEdit={ninjaToEdit} ninjaUpdate={ updateNinja }/> \n        :\n        <NinjaForm ninjaAdd={ addNinja } />\n      }\n      <hr />\n      <NinjaTable \n        ninjas={ninjas} \n        ninjaDelete={ i => deleteNinja(i) } \n        editNinja={ i => {\n          setNinjaIdToEdit(i);\n          setNinjaToEdit(ninjas[i]);\n        } }\n      />\n    </>\n  );\n}\n\nexport default NinjaInfoCard;","import React from 'react';\nimport './App.css';\nimport NinjaInfoCard from './Components/NinjaInfoCard';\n\n\nfunction App() {\n  return <NinjaInfoCard />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}